(function() {
  var Tile, TileGrid, utils;

  utils = require("./_utils");

  Tile = function(tilename, position, SpriteHash) {
    this.tilename = tilename;
    this.position = position;
    Tile.prototype.SpriteHash = SpriteHash ? SpriteHash : {};
    this.setSpriteHash = function(SpriteHash) {
      return Tile.prototype.SpriteHash = SpriteHash;
    };
    this.tilename = this.tilename || "blank";
    this.tilesize = this.game.canvas.width / 20;
    this.renderBlank = function() {
      var t, xo, xp, xw, yo, yp, yw, z;
      this.game.context.strokeStyle = "#fff";
      t = this.tilesize;
      z = this.zoom;
      xo = this.offset.x * t;
      yo = this.offset.y * t;
      xp = (this.position.x * t) * z;
      yp = (this.position.y * t) * z;
      xw = (xo + t + xp) * z;
      yw = (xo + t + xp) * z;
      this.game.context.fillStyle = "#f0f";
      return this.game.context.strokeRect(xp + xo, yp + yo, t, t);
    };
    this.render = function() {
      if (this.tilename === "blank") {
        return this.renderBlank.call(this);
      }
    };
    return this;
  };

  Tile.prototype.zoom = 1;

  Tile.prototype.offset = {
    x: 0,
    y: 0
  };

  module.exports.Tile = Tile;

  TileGrid = function(game, data, dimensions, SpriteHash) {
    var centerIndex, evenOffset, height, i, tile, width, x, x0, y, y0, _i, _ref, _ref1;
    this.data = data;
    Tile.prototype.game = game;
    TileGrid.prototype.game = game;
    this.tiles = [];
    width = dimensions.width;
    height = dimensions.height;
    /* Convert the data into a normalized grid data
    */

    evenOffset = (_ref = utils.isInt(width / 2)) != null ? _ref : {
      0: 1
    };
    x0 = ~~(width / 2);
    y0 = ~~(height / 2);
    centerIndex = null;
    x = -1 * x0;
    y = -1 * y0;
    for (i = _i = 0, _ref1 = dimensions.width * dimensions.height; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
      tile = new Tile(null, {
        x: x,
        y: y
      }, SpriteHash);
      this.tiles.push(tile);
      if (x === 0 && y === 0) {
        tile.center = true;
        centerIndex = i;
      }
      if (x === (x0 - evenOffset)) {
        x = -1 * x0;
        y += 1;
      } else {
        x++;
      }
    }
    return this;
  };

  TileGrid.prototype.setZoom = function(i) {
    if (i == null) {
      i = 1;
    }
    return Tile.prototype.zoom = i;
  };

  TileGrid.prototype.crossZoom = function(modifier) {
    return Tile.prototype.zoom = i * modifier;
  };

  TileGrid.prototype.move = function(x, y) {
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    Tile.prototype.offset.x += x;
    return Tile.prototype.offset.y += y;
  };

  TileGrid.prototype.changeTile = function(x, y, tilename) {
    return console.log("wow");
  };

  TileGrid.prototype.render = function() {
    this.game.context.fillStyle = "#000";
    this.game.context.fillRect(0, 0, this.game.canvas.width, this.game.canvas.height);
    return this.tiles.forEach(function(tile) {
      return tile.render.call(tile);
    });
  };

  module.exports.TileGrid = TileGrid;

}).call(this);

// Generated by CoffeeScript 1.5.0-pre
